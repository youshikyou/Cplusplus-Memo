/*****************/
Create the 2D vector
vector<vector<int>> v {6,7,8};

auto v ={6,7,8}:
for(auto i:v)
{
  cout<<i:
}
/*****************/

/******istringstream**********/
#include <sstream>
#include <string>

using std::istringstream;
using std::string;
using std::cout;

int main () 
{
    string a("1 2 3");

    istringstream my_stream(a);

    int n;
    my_stream >> n;
    cout << n << "\n";
}
The istringstream object can also be used as a boolean to determine 
if the last extraction operation failed - this happens if there wasn't any more of the string to stream, for example. 
If the stream still has more characters, you are able to stream again. See the following code for an example of using the istringstream this way:

int main() 
{
    string a("1 2 3");

    istringstream my_stream(a);

    int n;
    
    // Testing to see if the stream was successful and printing results.
    while (my_stream) {
        my_stream >> n;
        if (my_stream) {
            cout << "That stream was successful: " << n << "\n";
        }
        else {
            cout << "That stream was NOT successful!" << "\n";            
        }
    }
}
/******istringstream**********/

/************cmake************/
In CMakeLists.txt 

==============================================
cmake_minimum_required(VERSION 3.5.1)

set(CMAKE_CXX_STANDARD 14)

project(NewYear2021)

add_executable(your_executable_name src/main.cpp src/vect_add_one.cpp src/increment_and_sum.cpp)
===============================================

A typical CMake project will have a build directory in the same place as the top-level CMakeLists.txt. 
Make a build directory in the /home/workspace/cmake_example folder
within the build directory, you can now run CMake
$ cmake ..
$ make
$ ./your_executable_name


=====================================================
In general, prefer initialization to assignment. Initialization sets the value as soon as the object exists, 
whereas assignment sets the value only after the object comes into being. 
This means that assignment creates and opportunity to accidentally use a variable before its value is set.

In fact, initialization lists ensure that member variables are initialized before the object is created. 
This is why class member variables can be declared const, but only if the member variable is initialized through an initialization list. 
Trying to initialize a const class member within the body of the constructor will not work.
