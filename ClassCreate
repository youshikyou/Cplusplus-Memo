#include <cassert>
#include <stdexcept>

/*It has the try and catch , using member function to do validate*/
// TODO: Define class Pyramid
class Pyramid {
 public:
  // constructor
  Pyramid(int length, int width, int height)
      : length_(length), width_(width), height_(height) {
    Validate();
  }

  // accessors
  int Length() const { return length_; }
  int Width() const { return width_; }
  int Height() const { return height_; }

  // mutators
  void Length(int length) {
    length_ = length;
    Validate();
  }
  void Width(int width) {
    width_ = width;
    Validate();
  }
  void Height(int height) {
    height_ = height;
    Validate();
  }

  // public Volume() function
  float Volume() const { return Length() * Width() * Height() / 3.0; }

  // private class members
 private:
  int length_;
  int width_;
  int height_;
  void Validate() {
    if (length_ <= 0 || width_ <= 0 || height_ <= 0)
      throw std::invalid_argument("negative dimension");
  }
};

// Test
int main() {
  Pyramid pyramid(4, 5, 6);
  assert(pyramid.Length() == 4);
  assert(pyramid.Width() == 5);
  assert(pyramid.Height() == 6);
  assert(pyramid.Volume() == 40);

  bool caught{false};
  try {
    Pyramid invalid(-1, 2, 3);
  } catch (...) {
    caught = true;
  }
  assert(caught);
}

=======================================================================================

#include <cassert>
#include <stdexcept>
#include <cstring>
#include <string>
#include <iostream>

// TODO: Define "Student" class
class Student {
 public:
  // constructor
    Student(std::string name,int grade,float GPA):name_(name),grade_(grade),GPA_(GPA){
        Validate();
    }
  // accessors
    std::string GetName () const { return name_ ;}
    int GetGrade () const { return grade_;}
    float GetGPA () const { return GPA_;}
  
  // mutators
    void Name(std::string name){ name_ = name;}
    void Grade(int grade)
    {   
        grade_ = grade;
        Validate();  

    }

    void GPA(float GPA)
    { 
        GPA_ = GPA;
        Validate(); 
    }

 private:
    std::string name_;
    int grade_;
    float GPA_;
    void Validate()
    {
        if (GetGrade() <=0 || GetGrade() >12 ||GetGPA()<0.0 || GetGPA()>4.0)
        {
            throw std::invalid_argument("invalid value!");
        }
    }
};

// TODO: Test
int main() {
    Student studentA("Tom", 2, 3.8);
    assert(studentA.GetName() == "Tom");
    assert(studentA.GetGrade() == 2);
    assert(studentA.GetGPA() == 3.8f);

    bool caught{false};
    try {
        studentA.Grade(13);
    } catch (...) {
        caught = true;
    }
    assert(caught);
}
